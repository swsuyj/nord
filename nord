#!/bin/bash

wget="/usr/bin/wget"
curl="/usr/bin/curl"
sed="/usr/bin/sed"
ip="/usr/bin/ip"
fwd="/usr/bin/firewall-cmd"
unzip="/usr/bin/unzip"
nmcli="/usr/bin/nmcli"
ipt="/usr/sbin/iptables"
ipt6="/usr/sbin/ip6tables"

PROGNAME="nord"
BINDIR="$( [ $(id -u) -eq 0 ] && echo /var/local/bin || echo $HOME/.local/bin)"
CONF_DIR="$( [ $(id -u) -eq 0 ] && echo /etc || echo $HOME/.config)/nord"
DATA_DIR="$( [ $(id -u) -eq 0 ] && echo /usr/local/share || echo $HOME/.local/share)/nord"
CACHE_DIR="$( [ $(id -u) -eq 0 ] && echo /var/cache || echo $HOME/.cache/)nord"
SYSTEMD_DIR="$( [ $(id -u) -eq 0 ] && echo /etc/systemd/system || echo $HOME/.config/systemd)/user"
CONN_TYPE="tcp"
CONN_NAME="current_connection"
OVPN_DIR="$DATA_DIR/ovpn"
CONF_FILE="$CONF_DIR/nord.conf"
CONF_FILE_USER="$HOME/.config/nord/nord.conf"
CONF_FILE_SYSTEM="/etc/nord/nord.conf"
AUTH_FILE="$CONF_DIR/auth"
VPN_FILES="$CACHE_DIR/nordvpnfiles.zip"
IPT_FILE="$CONF_DIR/iptables-rules"
IPT6_FILE="$CONF_DIR/ip6tables-rules"
TOP_SERVERS_FILE="$CONF_DIR/topservers.conf"
VPN_FILE_URL="https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip"
VPN_STATS_URL="https://nordvpn.com/api/server/stats"
VPN_RECOMMENDED_URL="https://nordvpn.com/wp-admin/admin-ajax.php?action=servers_recommendations"
VPN_RECOMMENDED_DOUBLE='%22servers_groups%22:[1]'
VPN_RECOMMENDED_DEDICATED='%22servers_groups%22:[9]'
VPN_RECOMMENDED_STANDARD='%22servers_groups%22:[11]'
VPN_RECOMMENDED_P2P='%22servers_groups%22:[15]'
VPN_RECOMMENDED_OBFUSCATED='%22servers_groups%22:[17]'
VPN_RECOMMENDED_UDP='%22servers_technologies%22:[3]'
VPN_RECOMMENDED_TCP='%22servers_technologies%22:[5]'
VPN_RECOMMENDED_OBF_UDP='%22servers_technologies%22:[15]'
VPN_RECOMMENDED_OBF_TCP='%22servers_technologies%22:[17]'
VPN_RECOMMENDED_COUNTRY='%22country_id%22:'
VPN_CONN_TYPE='standard'
CONN_DEST=""
# TODO use only country code
CONN_DEST_DEFAULT="nl690"
CONN_DEST_COUNTRY=""
nowhere="nowhere"
CONN_PORT=-1
CONN_TIMEOUT=5

NUM_SERVERS=4
PING_INTERVAL=1
PING_NUM=1

VERBOSITY=30

KILL_SWITCH=0
CONF_LOADED=0

QUIET_FLAG="-q"

typeset -A nosave
typeset -A config
nosave=()
config=()
retvar=""
top_servers=()

typeset -A default_config
default_config=(
	["FIREWALL_QUIET_FLAG"]=$QUIET_FLAG
)

typeset -A COUNTRY_ID
COUNTRY_ID=(
	['al']=2 ['ar']=10 ['at']=14 ['au']=13 ['ba']=27 ['be']=21
	['bg']=33 ['br']=30 ['ca']=38 ['ch']=209 ['cl']=43 ['cr']=52
	['cy']=56 ['cz']=57 ['de']=81 ['dk']=58 ['ee']=68 ['es']=202
	['fi']=73 ['fr']=74 ['gb']=227 ['ge']=80 ['gr']=84 ['hk']=97
	['hr']=54 ['hu']=98 ['id']=101 ['ie']=104 ['il']=105 ['in']=100
	['is']=99 ['it']=106 ['jp']=108 ['kr']=114 ['lu']=126 ['lv']=119
	['md']=142 ['mk']=128 ['mx']=140 ['my']=131 ['nl']=153 ['no']=163
	['nz']=156 ['pl']=174 ['pt']=175 ['ro']=179 ['rs']=192 ['se']=208
	['sg']=195 ['sk']=196 ['th']=214 ['tr']=220 ['tw']=211 ['ua']=225
	['us']=228 ['vn']=234 ['za']=200
)
COUNTRY_ID['uk']=${COUNTRY_ID['gb']}






function debug()   { [[ ${config['VERBOSITY']} -le 10 ]] && echo -e "$@"; }
function info()    { [[ ${config['VERBOSITY']} -le 20 ]] && echo -e "$@"; }
function warning() { [[ ${config['VERBOSITY']} -le 30 ]] && echo -e "$@"; }
function error()   { [[ ${config['VERBOSITY']} -le 40 ]] && echo -e "$@" >&2; }


# Usage:  toLower x
# Before: x is a non-empty string.
# After:  Returns x in lowercase.
function toLower() {
	echo $1 | tr '[:upper:]' '[:lower:]'
}


# Usage:  toUpper x
# Before: x is a non-empty string.
# After:  Returns x in uppercase.
function toUpper() {
	echo $1 | tr '[:lower:]' '[:upper:]'
}


# Usage:  getConfig
# Before: Config file contains config.
# After:  Config options on file have been printed to stout.
function getConfig() {
	while read line
	do
		if echo "$line" | grep -E "^[[:alpha:]_]+=\S+$" &>/dev/null
		then
			echo "$line"
		fi
	done < $CONF_FILE
}


# Usage:  loadConfig
# Before: Nothing.
# After:  User configurations have been loaded from user configuration file.
function loadConfig() {
	# See https://unix.stackexchange.com/a/206216

	# Create temp config, preventing starting logging output upon
	#  encountering the logging flag
	typeset -A temp_config

	conf_files=("$CONF_FILE_SYSTEM" "$CONF_FILE_USER" "$CONF_FILE")
	conf_file_found=false
	for conf_file in "${conf_files[@]}"
	do
		[[ -f "$conf_file" ]] && conf_file_found=true && CONF_FILE=$conf_file
	done
	if [[ $conf_file_found == false ]]
	then
		error "No config files found!"
		info "Searched in $conf_files"
		exit 1
	fi

	for conf_file in "${conf_files[@]}"
	do
		if [[ -f $CONF_FILE ]]
		then
			while read line
			do
				if echo "$line" | grep -F = &>/dev/null
				then
					varname=$(echo "$line" | cut -d '=' -f 1)
					temp_config[$varname]=$(echo "$line" | cut -d '=' -f 2-)
					#debug "Loading $varname as ${temp_config[$varname]}"
				fi
			done < $CONF_FILE

			#info "Done loading configuration"
			temp_config["CONF_LOADED"]=1
		fi
	done

	config=()
	# Copy default config
	for config_key in "${!default_config[@]}"
	do
		config["$config_key"]="${default_config[$config_key]}"
	done

	# Copy temp to permanent config
	for config_key in "${!temp_config[@]}"
	do
		config["$config_key"]="${temp_config[$config_key]}"
	done

	# Load configs the nosaved config
	debug "Updating config with nosave..."
	for nokey in ${!nosave[@]}
	do
		debug "Changing $nokey from ${config[$nokey]} in config to ${nosave[$nokey]}"
		config["$nokey"]=${nosave["$nokey"]}
	done
}


# Usage:  updateConfig k v x
# Before: k is the config item to be changed, the key
#          v is the new value of the item. x is optional.
# After:  k has been set to v in the config file,
#          and (if x is not "nosave") in the config variable.
function updateConfig() {
	if [[ -z $1 || -z $2 ]]
	then
		error "Improper call to updateConfig. Aborting!"
		return 1
	fi

	info "Updating config $1 -> $2"

	if [[ $3 == "nosave" ]]
	then
		debug "Updating config $1 -> $2 temporarily"
		nosave["$1"]=$2
		loadConfig
		return 0
	fi

	debug "Updating config file... "

	# Branching depending whether the config is present or not.
	if [[ -z $(grep $1 $CONF_FILE) ]]
	then
		debug "Failed updating config, new config options are not allowed"
		error "Invalid config '`toLower $1`'"
		return 0
		sed -ci "$ a $1=$2" $CONF_FILE
	else
		sed -ci "s/^$1=.*/$1=$2/" $CONF_FILE
	fi
	info "Done updating config $1 -> $2"
	loadConfig
}


# Usage:  checkSetup
# Before: Nothing.
# After:  Returns 0 if all is set up.
#          Exits with code 1 otherwise.
function checkSetup() {
	info "Checking for required files and folders... "
	if [[
			! -f $CONF_FILE ||
			#! -f $AUTH_FILE ||
			! -d $CONF_DIR ||
			! -d $DATA_DIR ||
			! -d $OVPN_DIR ||
			-z $(ls $OVPN_DIR 2>/dev/null)
		]]
	then
		[[ ! -e "$CONF_FILE" ]] && error "CONF_FILE is missing: $CONF_FILE"
		[[ ! -e "$AUTH_FILE" ]] && error "AUTH_FILE is missing: $AUTH_FILE"
		[[ ! -e "$CONF_DIR" ]] && error "CONF_DIR is missing: $CONF_DIR"
		[[ ! -e "$DATA_DIR" ]] && error "DATA_DIR is missing: $DATA_DIR"
		[[ ! -e "$OVPN_DIR" ]] && error "OVPN_DIR is missing: $OVPN_DIR"
		error "Setup is in an invalid state!"
		exit 1
	fi
	info "Done checking for required files and folders"
	return 0
}


# Usage:  saveServers x
# Before: x is a list of servers to save as top servers.
# After:  Servers x have been saved to file.
function saveServers() {
	info "Saving top servers... "
	echo "" > $TOP_SERVERS_FILE # Clear saved server list.
	for server in "$@"
	do
		sed -ci "$ a $server" $TOP_SERVERS_FILE
	done
	info "Done saving top servers"
}


# Usage:  loadTopServers
# Before: $top_servers has been initialized
# After:  $retvar has been filled with latest update on good servers,
#          unless stat server is unreachable, then $retvar is
#          filled with top servers saved on file. If the file is empty
#          or unreachable, a default location is used, specified by config.
function loadTopServers() {
	[[ ${config["CONF_LOADED"]} -ne 1 ]] && loadConfig

	info "Loading best servers from file... "

	noserv=0 # Flag indicating if there are any servers loaded
	if [[ -f $TOP_SERVERS_FILE ]]
	then
		top_servers=()
		while read line
		do
			if echo "$line" | grep -E "^[[:alpha:]]+[[:digit:]]+$" &>/dev/null
			then
				top_servers+=("$line")
			fi
		done < $TOP_SERVERS_FILE
		info "Done loading best servers from file"

		# Check that top_servers is not empty
		if [[ ${#top_servers[@]} == 0 ]];then
			noserv=1
		fi
	else
		info "No top-servers file '$TOP_SERVERS_FILE'"
		noserv=1
	fi

	if [[ $noserv == 1 ]]
	then
		top_servers=()
		top_servers+=("${config["CONN_DEST_DEFAULT"]}")
	fi

	buffer=""
	for x in ${top_servers[@]}; do
		buffer+="$x "
	done
	debug "Top servers: $buffer"

	top_server=$(echo ${top_servers[@]} | sed 's/ /\n/g' | shuf | head -n 1)

	retvar=$top_server
	return 0
}



# Usage:  getHostIP x
# Before: .ovpn files are available. x is of the form [a-z]{2}\d+
# After:  ipv4 address of x
function getHostIP() {
	[[ ${config["CONF_LOADED"]} -ne 1 ]] && loadConfig
	dest_ip=$( \
		2>/dev/null \
		grep "^remote " \
		$OVPN_DIR/ovpn_${config["CONN_TYPE"]}/$1.nordvpn.com.${config["CONN_TYPE"]}.ovpn \
		| $sed 's/remote \(\(\w\+\.\?\)\+\) \w\+$/\1/' \
	)
	if [[ ! $? ]]; then
		error "Your vpn server files seem to be out of date."
		error "Try updating with \`nord update\`"
	fi
	retvar="$dest_ip"
}


# Usage:  firewallPunch x
# Before: firewalld is in use and running. x is of the form [a-z]{2}\d+ 
# After:  firewalld contains an exception to allow traffic to x over tun0
function firewallPunch() {
	[[ ${config["CONF_LOADED"]} -ne 1 ]] && loadConfig
	debug "Punching hole in firewall for $1... "
	if [[ ${config["KILL_SWITCH"]} -eq 0 || $1 == $nowhere ]]
	then
		debug "Kill switch is off. Aborting!"
		return 0
	fi

	getHostIP $1
	dest_ip=$retvar
	nord-firewall ${config["FIREWALL_QUIET_FLAG"]} $dest_ip ${config["CONN_TYPE"]} ${config["CONN_PORT"]}
	if [[ $? ]]
	then
		debug "Done punching firewall hole"
	else
		error "Failed firewal hole-punching"
	fi
}


# Usage:  firewallUnpunch x
# Before: firewalld is in use and running. x is of the form [a-z]{2}\d+
#         firewalldere is a hole in the firewall for x.
# After:  firewalld has no hole from firewallPunch for x
function firewallUnpunch() {
	[[ ${config["CONF_LOADED"]} -ne 1 ]] && loadConfig
	if [[ ${config["KILL_SWITCH"]} -eq 0 || $1 == $nowhere ]]
	then
		return 0
	fi
	debug "Mending hole in firewall for $1... "
	getHostIP $1
	dest_ip=$retvar
	nord-firewall ${config["FIREWALL_QUIET_FLAG"]} killswitch disconnect
	if [[ $? ]]
	then
		debug "Done mending hole in firewall"
	else
		error "Failed firewall hole-mending"
	fi
}


# Usage:  isNetworkAvailable 
# Before: Nothing.
# After:  Returns 0 if a connection is available.
#         Otherwise returns 1.
function isNetworkAvailable() {
	if [[ -n $($nmcli connection show --active) ]]
	then
		debug "A connection is available."
		return 0
	fi
	debug "A connection is not available."
	return 1
}


# Usage:  isConnectionActive
# Before: Nothing.
# After:  Returns 0 if a NordVPN connection is up.
#         Otherwise returns 1.
function isConnectionActive() {
	if [[ -n $($nmcli connection show --active | grep nord) ]]
	then
		debug "A connection is active."
		return 0
	fi
	debug "A connection is not active."
	return 1
}


# Usage:  ensureConnectivity
# Before: Nothing.
# After:  If there was an active NordVPN connection, nothing happens.
#          Otherwise a connection is established.
function ensureConnectivity() {
	if [[ ! isConnectionActive ]]
	then
		connect
	fi
}


# Usage:  getRecommendedServer_new
# Before: No VPN connection is up.
# After:  If server fetching is successful, results of top-N
#          servers is saved in topservers.conf
#          If CONN_DEST_COUNTRY is set, then the top servers
#          only include servers from that country
#          Returns a list of best servers (last known best, from
#          file if no connectivity).
function getRecommendedServer_new() {
	[[ ${config["CONF_LOADED"]} -ne 1 ]] && loadConfig

	if [[ ! isNetworkAvailable ]]
	then
		error "No internet connection!"
		exit 1
	fi

	# Open a hole in the firewall if on
	if [[ ${config["KILL_SWITCH"]} -eq 1 ]]
	then
		debug "Punching DNS lookup and stat fetch hole in firewall... "
		# root does the DNS lookup of 'nordvpn.com', so we can't
		# restrict DNS lookups to current user/pid.
		nord-firewall ${config["FIREWALL_QUIET_FLAG"]} nordvpn.com
		debug "Done punching holes for DNS and stats"
	fi

	filter=''
	technology=''
	  if [[ ${config['DOUBLE_VPN']}   -eq 1 ]]; then filter=$VPN_RECOMMENDED_DOUBLE
	elif [[ ${config['DEDICATED_IP']} -eq 1 ]]; then filter=$VPN_RECOMMENDED_DEDICATED
	elif [[ ${config['STANDARD']}     -eq 1 ]]; then filter=$VPN_RECOMMENDED_STANDARD
	elif [[ ${config['P2P']}          -eq 1 ]]; then filter=$VPN_RECOMMENDED_P2P
	elif [[ ${config['OBFUSCATED']}   -eq 1 ]]; then filter=$VPN_RECOMMENDED_OBFUSCATED
	fi

	  if [[ ${config['CONN_TYPE']} == 'udp' && ${config['OBFUSCATED']} -eq 1 ]]; then technology=$VPN_RECOMMENDED_OBF_UDP
	elif [[ ${config['CONN_TYPE']} == 'tcp' && ${config['OBFUSCATED']} -eq 1 ]]; then technology=$VPN_RECOMMENDED_OBF_TCP
	elif [[ ${config['CONN_TYPE']} == 'udp' ]]; then technology=$VPN_RECOMMENDED_UDP
	elif [[ ${config['CONN_TYPE']} == 'tcp' ]]; then technology=$VPN_RECOMMENDED_TCP
	fi

	if [[ ${config['CONN_DEST_COUNTRY']} != $nowhere ]]
	then
		technology=''
		country=$VPN_RECOMMENDED_COUNTRY${COUNTRY_ID[${config['CONN_DEST_COUNTRY']}]}
	fi

	url=$VPN_RECOMMENDED_URL'&filters={'
	[[ -n $technology ]] && url+=$technology
	[[ -n $country ]] && url+=$country
	[[ -n $filter ]] && url+=','$filter
	url+='}'
	info "Note: Only allowing to connect with either country or specialty server (obfuscated, p2p, double, dedicated)."

	debug "Setting recommendation filter to $filter"
	debug "and technology to $technology"
	debug "and fetching recommendation now from: $url"

	best_servers=$( \
		$curl -g \
			--silent \
			--connect-timeout ${config["CONN_TIMEOUT"]} \
			$url \
	)

	if [[ ${config["KILL_SWITCH"]} -eq 1 ]]
	then
		debug "Mending DNS lookup and stat fetch hole in firewall... "
		nord-firewall ${config["FIREWALL_QUIET_FLAG"]} killswitch disconnect
		debug "Done mending DNS and stat lookup hole in firewall"
	fi

	best_hostnames=""
	if [[ -z $best_servers ]]
	then
		error "Fetching a good server failed."
		error "Falling back on cached servers."
		loadTopServers
		best_hostnames=${retvar[@]}
	elif [[ $best_servers == '[]' ]]
	then
		error "Connecting by ${config['CONN_METHOD']} is not working at the moment."
		exit 0
	else
		# Parse $best_servers.
		best_hostnames=$( \
			echo $best_servers \
			| sed 's/"hostname":"/\n/g' \
			| sed 's/\[.*\|.nordvpn.com".*//' \
		)
	fi

	debug "Top servers: ${best_hostnames[@]}"
	saveServers ${best_hostnames[@]}
	retvar=${best_hostnames[@]}
}



# Usage:  getRecommendedServer
# Before: No VPN connection is up.
# After:  If server fetching is successful, results of top-N
#          servers is saved in topservers.conf
#          If CONN_DEST_COUNTRY is set, then the top servers
#          only include servers from that country
#          Returns the single best server (last known best, from
#          file if no connectivity).
function getRecommendedServer() {
	[[ ${config["CONF_LOADED"]} -ne 1 ]] && loadConfig
	# Fetch servers with lowest load
	info "Fetching information on the load of NordVPN servers."

	info "Getting nord stats... "

	# Open a hole in the firewall if on
	if [[ ${config["KILL_SWITCH"]} -eq 1 ]]
	then
		debug "Punching DNS lookup and stat fetch hole in firewall... "
		# root does the DNS lookup of 'nordvpn.com', so we can't
		# restrict DNS lookups to current user/pid.
		nord-firewall ${config["FIREWALL_QUIET_FLAG"]} nordvpn.com
		debug "Done punching DNS lookup and stat fetch hole in firewall"
	fi

	stats=""
	if [[ isNetworkAvailable ]]
	then
		debug "Fetching stats now, with connection timeout ${config["CONN_TIMEOUT"]}."
		stats=$( \
			$curl \
				--silent \
				--connect-timeout ${config["CONN_TIMEOUT"]} \
				$VPN_STATS_URL \
		)
	fi

	# Remove the rules set above.
	if [[ ${config["KILL_SWITCH"]} -eq 1 ]]
	then
		debug "Mending DNS and stat fetch hole in firewall... "
		nord-firewall ${config["FIREWALL_QUIET_FLAG"]} killswitch disconnect
		debug "Done mending DNS and stat fetch hole in firewall"
	fi

	# if no internet, load best servers.
	if [[ -z $stats ]]
	then
		if [[ ${config["KILL_SWITCH"]} -eq 0 ]]
		then
			warning "No internet access!"
			exit 1
		fi
		info "Kill switch is on."

		loadTopServers

		# Return latest-best server
		retvar=${retvar[0]}
		return 0
	else
		info "Done getting nord stats"
	fi


	# Server name search.
	server_grep='[a-z0-9]'

	if [[ ${config["OBFUSCATED"]} -eq 1 ]]
	then
		error "Obfuscated server select has not been implemented yet."
	fi
	if [[ ${config["CONN_DEST_COUNTRY"]} != $nowhere ]]
	then
		server_grep="${config['CONN_DEST_COUNTRY']}[0-9]"
	fi

	# Filter collected statistics to reveal top N servers in terms of least load.
	selected_servers=$( \
		echo $stats \
		| $sed 's/^{\|}$//g' | $sed 's/,/\n/g' \
		| $sed 's/^"\(\w\{2\}\)\([^.]\+\)\.nordvpn\.com":{"percent":\(\w\+\)}$/\3 \1\2/' \
		| grep "$(ls -l $OVPN_DIR/ovpn_${config["CONN_TYPE"]} \
		| grep "$server_grep\+.nordvpn" \
		| $sed 's/.*\([a-z]\{2\}[0-9]\+\)\.nordvpn\.com.*/\1/')" \
		| sort -n \
		| cut -d ' ' -f 2 \
		| head -n `expr 5 \* ${config["NUM_SERVERS"]}` \
		| shuf \
		| head -n ${config["NUM_SERVERS"]} \
	)

	# Initialize server list, and ping times
	servers=()
	ping_times=()
	buffer="Top servers:\n"
	for server in "${selected_servers[@]}"
	do
		buffer+="$server "
		servers+=($server)
		ping_times+=(-1)
	done
	debug "$buffer"


	interface=$($nmcli connection show --active | grep 'wifi\|eth' | sed 's/.*\s\(\w\+\)/\1/')

	info "Starting pinging of top servers."
	# Allow pinging despite killswitch.
	if [[ ${config["KILL_SWITCH"]} -eq 1 ]]
	then
		debug "Punching pinging hole in firewall... "
		nord-firewall ${config["FIREWALL_QUIET_FLAG"]} killswitch ping
		debug "Done punching pinging hole in firewall"
	fi
	# Ping top n servers to find the nearest
	#  (assuming ping time correlates with distance)
	for server_key in ${!servers[@]}
	do
		# TODO parallelize this loop

		times=$( \
			ping ${servers[$server_key]}.nordvpn.com \
				-I $interface \
				-c ${config["PING_NUM"]} \
				-i ${config["PING_INTERVAL"]} -q \
			| grep "rtt min/avg/max/mdev" \
		)

		if [[ -z $times ]]; then
			error "Unable to ping NordVPN server ${servers[$server_key]}."
			unset servers[$server_key]
			unset ping_times[$server_key]
			continue
			return 1
		fi

		ping_times[$server_key]=$( \
			echo $times | \
			$sed 's/^.*min\/avg\/max\/mdev = [0-9.]\+\/\([0-9]\+\).*$/\1/' \
		)
	done
	# Mend killswitch ping hole.
	if [[ ${config["KILL_SWITCH"]} -eq 1 ]]
	then
		debug "Mending pinging hole in firewall... "
		nord-firewall ${config["FIREWALL_QUIET_FLAG"]} killswitch disconnect
		debug "Done mending pinging hole in firewall"
	fi

	# Ensure all threads have completed
	info "Servers with lowest load have been pinged."

	# Order servers by ping time
	debug "Sorting top servers by ping time... "
	zipped=()
	for ((i=0; i<${#servers[@]}; i++))
	do
		zipped+=("${ping_times[$i]}:${servers[$i]}")
	done
	debug "Top servers and time:"
	debug "$(echo ${zipped[@]} | sed 's/\s/\n/g' | sort -n)"
	ordered=$(echo ${zipped[@]} | sed 's/\s/\n/g' | sort -n | sed 's/^.*://')
	debug "Top servers in order:"
	debug "${ordered[@]}"

	saveServers ${ordered[@]}

	retvar=${servers[$min_index]}
}


# Usage:  killswitch x
# Before: x is "on" or "off"
# After:  Killswich has been turned on/off according to x.
function killswitch() {
	[[ ${config["CONF_LOADED"]} -ne 1 ]] && loadConfig
	info "Turning kill switch $1..."
	if [[ $1 == "on" ]]
	then
		if [[ ${config["KILL_SWITCH_SET"]} -ne 1 ]]
		then
			error "The kill switch is not set up on your computer."
			error "Setting up the kill switch requires super privileges,"
			error "but only the first time, after which the kill switch"
			error "can be used as a normal user."
			error "Please enter your password:"
			sudo chown root:root $BINDIR/nord-firewall && sudo chmod a+s $BINDIR/nord-firewall
			[[ $? -ne 0 ]] && return
			nord-firewall ${config["FIREWALL_QUIET_FLAG"]} killswitch setup
			sudo $ipt-save -f $IPT_FILE
			sudo $ipt6-save -f $IPT6_FILE
			sudo $ipt-restore $IPT_FILE
			sudo $ipt6-restore $IPT6_FILE
			updateConfig "KILL_SWITCH_SET" 1
		fi
		nord-firewall ${config["FIREWALL_QUIET_FLAG"]} killswitch on

		# Also punch a hole after the reload.
		updateConfig "KILL_SWITCH" 1
		debug "After updating config, punch a hole."
		firewallPunch ${config["CONN_DEST"]}
	elif [[ $1 == "off" ]]
	then
		nord-firewall ${config["FIREWALL_QUIET_FLAG"]} killswitch off
		updateConfig "KILL_SWITCH" 0
	else
		info "Failed setting killswitch"
		error "Invalid parameter to kill switch. Aborting!"
		return 1
	fi
	warning "Successfully turned kill switch $1."

	return 0
}


# Usage:  getLogin
# Before: Nothing.
# After:  Username and password is stored in plain text.
function getLogin() {
	echo "Please log in."
	echo -n "Username: "
	read username
	echo -n "Password: "
	read -s password
	echo ""
	debug "Creating auth file... "
	install -m 600 /dev/null $AUTH_FILE
	echo > $AUTH_FILE
	debug "Done creating auth file"
	sed -ci "1s/^/vpn.secrets.password:$password/" $AUTH_FILE
	
	updateConfig "USERNAME" $username
}


# Usage:  ensureLogin
# Before: Nothing.
# After:  If no credentials are available, then the user has been
#          prompted for login credentials, which have been saved.
#          If credentials are available, nothing happens.
function ensureLogin() {
	# If credentials are not stored, request them.
	if [[ ! -f $AUTH_FILE || -z "${config['USERNAME']}" ]]; then
		getLogin
	fi
}


# Usage:  connectionCleanup
# Before: Last connection might still be present in networkmanager.
# After:  Remnants from last connection has been removed.
function connectionCleanup() {
	if [[ ${config["CONN_DEST"]} == $nowhere ]]
	then
		return 0
	fi
	output=$(2>&1 $nmcli connection delete 'nord')
	debug $output
	firewallUnpunch ${config["CONN_DEST"]}
	updateConfig "CONN_DEST" $nowhere
}


# Usage:  disconnect
# Before: A connection is up to Nord
# After:  The connection has been terminated.
function disconnect() {
	[[ ${config["CONF_LOADED"]} -ne 1 ]] && loadConfig
	output="$($nmcli connection show | grep 'nord')"
	debug "nmcli search results:"
	debug "$output"
	if [[ -z $output || ${config["CONN_DEST"]} == $nowhere ]]
	then
		warning "No connection active. Aborting!"
		return 1
	fi
	output=$(2>&1 $nmcli connection down 'nord')
	debug $output
	connectionCleanup
	if [[ $? ]]
	then
		warning "Successfully disconnected."
	else
		error "Error when disconnecting."
	fi
}


# Usage:  connect
# Before: Nothing.
# After:  A connection to Nord is up.
function connect() {
	ensureVpnFiles
	checkSetup
	ensureLogin
	[[ ${config["CONF_LOADED"]} -ne 1 ]] && loadConfig
	$nmcli connection show --active | grep 'nord' &>/dev/null
	if [[ $? -eq 0 ]]
	then
		info "There is already a VPN connection up."
		warning "Already connected to ${config["CONN_DEST"]}."
		return 0
	fi

	# Remove last connection; The connection might have dropped,
	# and the last connection is still in network manager.
	debug "Cleaning up last connection."
	connectionCleanup

	getRecommendedServer_new
	top_servers=${retvar[@]}

	# Connect to NordVPN
	info "Now connecting to NordVPN."
	for server in "${top_servers[@]}"
	do
		updateConfig "CONN_DEST" $server

		# Punch hole in firewall
		firewallPunch ${config["CONN_DEST"]}
		dest="${config["CONN_DEST"]}.nordvpn.com.${config["CONN_TYPE"]}"

		code=0
		output=$(2>&1 $nmcli connection import type openvpn file \
			"$OVPN_DIR/ovpn_${config["CONN_TYPE"]}/$dest.ovpn" )
		[[ $? != 0 ]] && code=1
		debug "${output[@]}"
		output=$(2>&1 $nmcli connection modify $dest con-name 'nord' )
		[[ $? != 0 ]] && code=1
		debug "${output[@]}"
		output=$(2>&1 $nmcli connection modify 'nord' vpn.user-name ${config["USERNAME"]} )
		[[ $? != 0 ]] && code=1
		debug "${output[@]}"
		output=$(2>&1 $nmcli connection up 'nord' passwd-file $AUTH_FILE )
		[[ $? != 0 ]] && code=1
		debug "${output[@]}"

		if [[ $code != 0 ]]
		then
			info "Connecting to ${config["CONN_DEST"]} failed."
			debug "Disconnecting now."
			connectionCleanup
			continue
		fi
		warning "Successfully connected to ${config["CONN_DEST"]}."
		return 0
	done
	error "Something came up."
	return 1
}


# Usage:  teardown
# Before: Nord has been set up.
# After:  No system files from nord are present.
function teardown() {
	warning "Removing active connections... "
	(1>/dev/null disconnect)
	warning "Done removing active connections"
	killswitch "off"
	warning "Tearing kill switch down... "
	nord-firewall ${config["FIREWALL_QUIET_FLAG"]} killswitch teardown
	warning "Done tearing killswitch down"
	warning "Removing nord... "
	rm -f $BINDIR/$PROGNAME
	rm -f $BINDIR/nord-firewall
	rm -f $SYSTEMD_DIR/$PROGNAME.service
	rm -f $SYSTEMD_DIR/$PROGNAME.timer
	rm -rf $CONF_DIR $DATA_DIR $CACHE_DIR
	warning "Done removing nord dirs"
}


# Usage:  download
# Before: Nothing.
# After;  Latest .ovpn files have been fetched and stored.
function download {
	$wget -O $VPN_FILES $VPN_FILE_URL
}

# Usage:  downloadVpnFiles
# Before: Nothing.
# After:  A configuration file has been created,
#         .ovpn files have been downloaded and extracted,
#         unless the --cache flag is present, then no download takes place.
function downloadVpnFiles() {
	error "No VPN files found to use for connecting"

	# If the cache has vpn files zipped, they might be old.
	# Let the user decide if they need updating.
	# If no cache, the zip file is downloaded.
	if [[ -e $VPN_FILES \
		&& ${config['CACHE']} != 1 \
		&& $1 != no-interact \
		&& ${config['VERBOSITY']} -lt 40 \
		]]
	then
		echo -n "Cached vpn files found. Do you want to use them? [y/n] "
		answered=0
		while [[ answered -eq 0 ]]
		do
			read answer
			if [[ $answer == "y" || $answer == "Y" ]]
			then
				answered=1
			elif [[ $answer == "n" || $answer == "N" ]]
			then
				answered=1
				rm -r $VPN_FILES
				download
			else
				echo -n "Invalid answer. Do you want to use the cached files? [y/n] "
			fi
		done
	elif [[ ${config['CACHE']} != 1 ]]
	then
		download
	fi
	$unzip -q $VPN_FILES -d $OVPN_DIR

	error "Done fetching OpenVPN files"
	return 0
}

function ensureVpnFiles() {
	[[ ! -e $(dirname $OVPN_DIR) ]] && mkdir -p $(dirname $OVPN_DIR)
	[[ ! -e $OVPN_DIR ]] && mkdir -p $OVPN_DIR
	[[ -z $(ls $OVPN_DIR) ]] && downloadVpnFiles
}


# Usage:  checkLegalCountry x
# Before: Nothing.
# After:  Returns 0 if x is a country code.
#         Returns 1 otherwise.
function checkLegalCountry() {
	info "Checking whether $1 is a legal country code... "
	if [[ -n ${COUNTRY_ID[$1]} ]]
	then
		return 0
	fi
	error "'$1' is an illegal country code!"
	return 1
}


# Usage:  status x
# Before: x is a config item.
# After:  echoes 'on' for config value 1,
#         'off' for config value 0,
#         the value else.
function status() {
	[[ -z $1 ]] && return 1
	  if [[ $1 == 1 ]]; then echo on
	elif [[ $1 == 0 ]];  then echo off
	else echo $1
	fi
}


# Usage:  printCountries
# Before: Nothing.
# After:  All recognized countries have been printed to stdout.
function printCountries() {
	local buffer=""
	local counter
	local loop
	local countries
	loop='..........'
	counter=$loop
	countries=$(echo ${!COUNTRY_ID[@]} | sed 's/ /\n/g' | sort)
	buffer+="Valid country codes:\n   [ "
	for id in ${countries[@]}
	do
		if [[ $counter == $loop ]]
		then
			counter=.
			buffer+="\n     "
		fi
		buffer+="$id "
		counter+=.
	done
	buffer+="]"
	echo "$buffer"
}


# Usage:  printStatus
# Before: Nothing.
# After:  Status of various parts of the application have been
#         printed to stdout.
function printStatus() {
	info "Printing status message..."
	echo " Status of nord parts:                                 "
	echo "                                                       "
	echo "   obfuscated: $(status ${config['OBFUSCATED']})       "
	echo "   connection: $(status ${config['CONN_DEST']})        "
	echo "  kill switch: $(status ${config['KILL_SWITCH']})      "
	echo " auto-connect: $(status ${config['AUTOCONNECT']})      "
	echo "     protocol: $(status ${config['CONN_TYPE']})        "
	echo "      country: $(status ${config['CONN_DEST_COUNTRY']})"
}


# Usage:  printHelp
# Before: Nothing.
# After:  A useful help message has been printed to stdout.
function printHelp() {
	info "Printing help message..."
	echo ""
	echo " Usage: $PROGNAME [OPTION] [COMMAND [ARGUMENT]]"
	echo ""
	echo ""
	echo "   Commands [args]"
	echo ""
	echo "   donwload            Downloads the required files"
	echo "                         and takes care of some initial plumbing."
	echo "      login            Saves your credentials for connecting later."
	echo "     update            (Re-)download the latest .ovpn files."
	echo "    connect [x|f [x]]  Connect to the best NordVPN server, or to x"
	echo "                         where x is a country code. Or to x with filter f"
	echo "                         where f is {obfuscated, dedicated, double, p2p}."
	echo "                         If x is omitted, then a good server of type f"
	echo "                         is chosen. There is no guarantee than a f x"
	echo "                         configuration will work. Supplying f or x overrides"
	echo "                         your configurations set with nord set."
	echo " disconnect            Disconnect from NordVPN."
	echo "     config            Display all of your configurations."
	echo "        set x y        Set config item x to y."
	echo "                       Valid config items and their values:"
	echo "                         killswitch  [on|off]  Requires root access to set up."
	echo "                         protocol    [tcp|udp]"
	echo "                         obfuscated  [on|off]"
	echo "                         autoconnect [on|off]"
	echo ""
	return 0
}


# Usage:  invalidParam
# Before: Nothing.
# After:  An error message has been printed notifying the
#          user that the supplied argument is invalid.
#          Program exits with code 1.
function invalidParam() {
	error "Invalid parameter!"
	exit 1
}


# Usage:  setDirs
# Before: Nothing.
# After:  Directories necessary for functioning have been
#         set accordingly and in some cases created.
function setDirs() {
	local isRoot="$([ $(id -u) -eq 0 ] && echo true || echo false)"

	# Set user dirs
	BINDIR="$HOME/.local/bin"
	CONF_DIR="$HOME/.config/nord"
	DATA_DIR="$HOME/.local/share/nord"
	CACHE_DIR="$HOME/.cache"
	SYSTEMD_DIR="$HOME/.local/share/systemd"

	# Default to system dirs if missing, or if running as root
	[[ $isRoot == true || ! -d $BINDIR ]] && BINDIR="/var/local/bin" || mkdir -p $BINDIR
	[[ $isRoot == true || ! -d $CONF_DIR ]] && CONF_DIR="/etc/nord" || mkdir -p $CONF_DIR
	[[ $isRoot == true || ! -d $DATA_DIR ]] && DATA_DIR="/usr/local/share/nord" || mkdir -p $DATA_DIR
	[[ $isRoot == true || ! -d $CACHE_DIR ]] && CACHE_DIR="/var/cache" || mkdir -p $CACHE_DIR
	[[ $isRoot == true || ! -d $SYSTEMD_DIR ]] && SYSTEMD_DIR="/etc/systemd/system" || mkdir -p $SYSTEMD_DIR

	# Set dependents
	OVPN_DIR="$DATA_DIR/ovpn"
	CONF_FILE="$CONF_DIR/nord.conf"
	AUTH_FILE="$CONF_DIR/auth"
	VPN_FILES="$CACHE_DIR/nordvpnfiles.zip"
	IPT_FILE="$CONF_DIR/iptables-rules"
	IPT6_FILE="$CONF_DIR/ip6tables-rules"
	TOP_SERVERS_FILE="$CONF_DIR/topservers.conf"

	return 0

	debug "Set CONF_FILE: $CONF_FILE"
	debug "Set CONF_DIR: $CONF_DIR"
	debug "Set DATA_DIR: $DATA_DIR"
	debug "Set OVPN_DIR: $OVPN_DIR"
	debug "Set OVPN_DIR: $OVPN_DIR"
	debug "Set CONF_FILE: $CONF_FILE"
	debug "Set AUTH_FILE: $AUTH_FILE"
	debug "Set VPN_FILES: $VPN_FILES"
	debug "Set IPT_FILE: $IPT_FILE"
	debug "Set IPT6_FILE: $IPT6_FILE"
	debug "Set TOP_SERVERS_FILE: $TOP_SERVERS_FILE"
}


function main() {
	# Empty call, do nothing
	if [[ $# -eq 0 ]]
	then
		return 0
	fi

	setDirs
	loadConfig
	# Parse command line options
	positional=()
	while [[ $# -gt 0 ]]
	do
		cmd=$1

		case $cmd in
			-q|--quiet)
				updateConfig "VERBOSITY" 40 "nosave"
				shift
				;;
			-v|--verbose)
				updateConfig "VERBOSITY" 20 "nosave"
				shift
				;;
			-vv|--very-verbose)
				updateConfig "VERBOSITY" 10 "nosave"
				shift
				;;
			c|connect)
				if [[ -n $2 ]]
				then
					checkLegalCountry $2
					legalCountry=$?
					# Ensure the country code is legal.
					if [[ $(toLower $2) == "double" ]]
					then
						updateConfig 'DOUBLE_VPN' 1 'nosave'
						shift
					elif [[ $(toLower $2) == "dedicated" ]]
					then
						updateConfig 'DEDICATED_IP' 1 'nosave'
						shift
					elif [[ $(toLower $2) == "p2p" ]]
					then
						updateConfig 'P2P' 1 'nosave'
						shift
					elif [[ $(toLower $2) == "obfuscated" ]]
					then
						updateConfig 'OBFUSCATED' 1 'nosave'
						shift
					elif [[ $legalCountry -ne 0 ]]
					then
						error "Invalig country code!"
						printHelp
						exit 1
					else
						updateConfig "CONN_DEST_COUNTRY" $2 'nosave'
					fi
					updateConfig 'CONN_METHOD' $2 'nosave'
				fi
				connect
				return 0
				;;
			d|disconnect)
				disconnect
				return 0
				;;
			r|reconnect)
				shift
				debug "Disconnecting in reconnect"
				disconnect
				debug "Connecting in reconnect with arguments: $@"
				set -- "connect" "$@"
				;;
			login)
				getLogin
				return 0
				;;
			teardown)
				teardown
				return 0
				;;
			-c|--cache)
				updateConfig 'CACHE' 1 'nosave'
				shift
				;;
			download)
				downloadVpnFiles
				return 0
				;;
			s|status)
				printStatus
				return 0
				;;
			config)
				getConfig
				return 0
				;;
			set)
				shift # Remove "set" command
				if [[ -z $1 || -z $2 ]]
				then
					printHelp
					return 1
				fi
				info "Setting $1 to $2."
				option_key=$(toLower $1)
				val=$2
				if   [[ $val == "on"  ]]; then val=1
				elif [[ $val == "off" ]]; then val=0
				elif [[ $val == 0     ]]; then val=0
				elif [[ $val == 1     ]]; then val=1
				fi

				# Transform command line options to keys.
				if [[ $option_key == "country" ]]; then option_key="conn_dest_country"
				elif [[ $option_key == "protocol" ]]; then option_key="conn_type"
				fi

				# Special cases
				if [[ $1 == "killswitch" ]]
				then
					killswitch $2
					return 0
				elif [[ $option_key == "conn_type" ]]
				then
					[[ ! ( $val == "tcp" || $val == "TCP" ||
					       $val == "udp" || $val == "UDP" ) ]] && invalidParam
					val=$(toLower $val)
					debug "Updating connection port for $option_key."
					[[ $val == "tcp" ]] && updateConfig "CONN_PORT" 443
					[[ $val == "udp" ]] && updateConfig "CONN_PORT" 1194
				elif [[ $option_key == 'conn_dest_country' ]]
				then
					# Check that the supplied country is valid
					checkLegalCountry $val
					if [[ $? -ne 0 ]]
					then
						error "Invalid country code."
						printCountries
						updateConfig 'CONN_DEST_COUNTRY' $nowhere
						return 1
					fi
					updateConfig 'CONN_DEST_COUNTRY' $val
				elif [[ $option_key == "autoconnect" ]]
				then
					if [[ $val == 1 ]]
					then
						userFlag="$( [[ $(id -u) -eq 0 ]] && echo '' || echo '--user')"
						# Autoconnect needs login credentials.
						ensureLogin
						info "Making $PROGNAME autoconnect... "
						systemctl $userFlag enable $PROGNAME.service --now
						systemctl $userFlag enable $PROGNAME.timer --now
						updateConfig 'AUTOCONNECT' 1
						info "Done setting autoconnect"
					else
						info "Making $PROGNAME stop autoconnecting... "
						systemctl $userFlag stop $PROGNAME.timer
						systemctl $userFlag disable $PROGNAME.timer
						systemctl $userFlag stop $PROGNAME.service
						systemctl $userFlag disable $PROGNAME.service
						updateConfig 'AUTOCONNECT' 0
						info "Done stopping autoconnect"
					fi
				fi

				info "Transforming $option_key to $(toUpper $option_key)"
				updateConfig $(toUpper $option_key) $val
				return 0
				;;
			update)
				download
				return 0
				;;
			command)
				shift
				cmd=$1
				shift
				$cmd $@
				return 0
				;;
			*)
				printHelp
				return 1
				;;
		esac
	done


}

main $@




